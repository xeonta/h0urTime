package dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import exceptions.DbException;
import model.DbConnection;

public abstract class GenericDao<T> {

	// the entity class type
	protected Class<T> entityType;
	// the name of the table in database
	protected String tableName;
	// the connection to the database
	protected DbConnection conn = null;
	
	/**
	 * Constructor
	 * 
	 * @param entityType, the type of the entity class
	 * @param tableName, the name of the table in database
	 * @param conn, the database connection
	 */
	public GenericDao(Class<T> entityType, String tableName, DbConnection conn) {
		// set the model class type
		this.entityType = entityType;
		// set the table name
		this.tableName = tableName;
		// set the connection
		this.conn = conn;
	}
	
	/**
	 * Load a specific record by id and create a entity object with the loaded data
	 * 
	 * @param id, the id of the record to be loaded
	 * @return the created entity
	 * @throws DbException On any error
	 */
	public abstract T loadById(int id) throws DbException;
	
	/**
	 * Alias for loadById
	 */
	public T findBy(int id) throws DbException {
		return this.loadById(id);
	}
	
	/**
	 * Alias for loadById
	 */
	public T load(int id) throws DbException {
		return this.loadById(id);
	}
	
	/**
	 * Load all records from table and create entity objects of the loaded data
	 * 
	 * @return a list of created entity object, or empty list
	 * @throws DbException On any database error
	 */
	public abstract List<T> loadAll() throws DbException;
	
	public abstract List<T> loadAllByUserId(int userid) throws DbException;
	
	/**
	 * Inserts the given entity to the database as new record
	 * 
	 * Sets the id in the entity after the insert was successfull
	 * 
	 * @param entity, the entity to be inserted to the database
	 * @return the entity with set new id
	 * @throws DbException On any Database error
	 */
	public abstract T insert(T entity) throws DbException;
	
	/**
	 * Updates the given entity in the database
	 * 
	 * @param entity, the entity to be updated in the database
	 * @return the entity
	 * @throws DbException On any Database error
	 */
	public abstract T update(T entity) throws DbException;
	
	/**
	 * Deletes a record in database identified by id
	 * 
	 * @param id, the id of the record to be deleted
	 * @throws DbException On any error
	 */
	public abstract void delete(int id) throws DbException;
	
	/**
	 * Checks if connection is open
	 * 
	 * @return true or false if connection is open
	 */
	public boolean hasConnection() {
		if (this.conn == null) 
			return false;
		return this.conn.hasConnection();
	}
	
	/**
	 * Tries to extract the last genereate / autoincremented id
	 * 
	 * Works only if prior to this method an insert was executed!
	 * 
	 * @param preparedStatement, the statement with which the insert was done
	 * @return the generated / autoincremented id
	 * @throws SQLException On any error
	 */
	public int getLastAutoincrementId(PreparedStatement preparedStatement) throws SQLException {
		// get sql own method for last ids
		ResultSet resultSet = preparedStatement.getGeneratedKeys();
		// if there is an result, throw exception
		if (resultSet.next() == false) 
			throw new SQLException("No autogenerated ids found");
		// return id
		return resultSet.getInt(1);
	}
	
	/**
	 * Count all records in table and returns the number
	 * 
	 * @return the number of counted records in table
	 * @throws DbException On any database error
	 * @throws SQLException On any database error
	 */
	public int cntRecords() throws DbException, SQLException {
		// if no connection, show error
		if (!this.hasConnection()) 
			throw new DbException("No connection to Database");
		
		int recs = 0;
		PreparedStatement preparedStatement = this.conn.getConnection().prepareStatement("SELECT COUNT(*) FROM " + this.tableName);
		ResultSet rs = preparedStatement.executeQuery();
		if (rs.next())
			recs = rs.getInt(1);
		return recs;
	}

}
